#!/usr/bin/env python3
#
# GUI for Qubes OS Template Upgrade Script
# Supports Fedora and Debian Templates
# https://www.kennethrrosen.cloud
#
# Copyright (C) 2024 by Kenneth R. Rosen
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License; 
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import gi
import re
import subprocess
import threading
import os
import signal
import qubesadmin
from qubes_config.widgets.gtk_utils import load_icon
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib, GdkPixbuf

class QubesTemplateUpgradeGUI(Gtk.Window):
    def __init__(self):
        super().__init__(title="Qubes Template Upgrade")
        self.set_border_width(10)
        self.set_default_size(800, 700)
        self.set_position(Gtk.WindowPosition.CENTER)

        self.process = None
        self.selected_template = None

        main_vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.add(main_vbox)

        header = Gtk.Label()
        header.set_markup("<big><b>Qubes Template Upgrade</b></big>")
        main_vbox.pack_start(header, False, False, 10)

        templates_frame = Gtk.Frame(label="Available Templates and StandaloneVMs")
        main_vbox.pack_start(templates_frame, True, True, 10)

        self.templates_liststore = Gtk.ListStore(GdkPixbuf.Pixbuf, str)
        self.templates_treeview = Gtk.TreeView(model=self.templates_liststore)
        self.templates_treeview.connect("row-activated", self.on_template_double_clicked)

        renderer_pixbuf = Gtk.CellRendererPixbuf()
        column_pixbuf = Gtk.TreeViewColumn("Icon", renderer_pixbuf, pixbuf=0)
        self.templates_treeview.append_column(column_pixbuf)

        renderer_text = Gtk.CellRendererText()
        column_text = Gtk.TreeViewColumn("Template", renderer_text, text=1)
        self.templates_treeview.append_column(column_text)

        templates_scrolled_window = Gtk.ScrolledWindow()
        templates_scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        templates_scrolled_window.add(self.templates_treeview)
        templates_frame.add(templates_scrolled_window)

        self.populate_templates()

        clone_hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        main_vbox.pack_start(clone_hbox, False, False, 0)

        self.clone_checkbox = Gtk.CheckButton(label="Clone and Rename Template")
        self.clone_checkbox.connect("toggled", self.on_clone_checkbox_toggled)
        clone_hbox.pack_start(self.clone_checkbox, False, False, 0)

        self.clone_entry = Gtk.Entry()
        self.clone_entry.set_sensitive(False)
        clone_hbox.pack_start(self.clone_entry, True, True, 0)

        button_hbox = Gtk.Box(spacing=6)
        main_vbox.pack_start(button_hbox, False, False, 0)

        self.start_button = Gtk.Button(label="Start Upgrade")
        self.start_button.connect("clicked", self.on_start_button_clicked)
        self.start_button.set_sensitive(False)
        button_hbox.pack_start(self.start_button, True, True, 0)

        self.close_button = Gtk.Button(label="Close")
        self.close_button.connect("clicked", self.on_close_button_clicked)
        button_hbox.pack_start(self.close_button, True, True, 0)

        self.progressbar = Gtk.ProgressBar()
        main_vbox.pack_start(self.progressbar, False, False, 10)

        log_frame = Gtk.Frame(label="Output Log")
        main_vbox.pack_start(log_frame, True, True, 0)

        self.log_textview = Gtk.TextView()
        self.log_textview.set_editable(False)
        self.log_textbuffer = self.log_textview.get_buffer()

        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        scrolled_window.add(self.log_textview)
        log_frame.add(scrolled_window)

        self.connect("delete-event", self.confirm_exit)

    def confirm_exit(self, widget, event):
        dialog = Gtk.MessageDialog(
            transient_for=self,
            flags=0,
            message_type=Gtk.MessageType.QUESTION,
            buttons=Gtk.ButtonsType.YES_NO,
            text="Are you sure you want to exit?",
        )
        dialog.format_secondary_text(
            "An upgrade process is running. Exiting now may interrupt the upgrade."
        )
        response = dialog.run()
        dialog.destroy()
        if response == Gtk.ResponseType.YES:
            self.on_close_button_clicked(widget)
        return True  # Prevents the window from closing

    def on_close_button_clicked(self, widget):
        if self.process and self.process.poll() is None:
            os.killpg(os.getpgid(self.process.pid), signal.SIGTERM)
            subprocess.run(['qvm-shutdown', self.selected_template])
        Gtk.main_quit()

    def populate_templates(self):
        try:
            app = qubesadmin.Qubes()  # Create a Qubes admin object

            for vm in app.domains:
                if vm.klass in ['TemplateVM', 'StandaloneVM']:
                    self.add_vm_item(vm)

        except Exception as e:
            print("Error fetching Qubes VMs:", e)

    def add_vm_item(self, vm):
        pixbuf = self.get_qube_icon(vm)
        self.templates_liststore.append([pixbuf, vm.name])

    def get_qube_icon(self, vm):
        label_name = vm.label.name
        icon = load_icon(vm.label.icon, 16, 16)
        return icon

    def on_template_double_clicked(self, treeview, path, column):
        model = treeview.get_model()
        iter = model.get_iter(path)
        template_name = model.get_value(iter, 1)
        self.selected_template = template_name
        self.clone_checkbox.set_sensitive(True)
        self.start_button.set_sensitive(True)

    def on_clone_checkbox_toggled(self, widget):
        if self.clone_checkbox.get_active():
            self.clone_entry.set_sensitive(True)
        else:
            self.clone_entry.set_sensitive(False)

    def on_start_button_clicked(self, widget):
        self.start_button.set_sensitive(False)
        self.progressbar.set_fraction(0.0)
        self.log_textbuffer.set_text("")

        if self.selected_template:
            if self.clone_checkbox.get_active():
                new_template = self.clone_entry.get_text()
                threading.Thread(target=self.run_upgrade, args=(self.selected_template, new_template)).start()
            else:
                threading.Thread(target=self.run_upgrade, args=(self.selected_template, None)).start()

    def run_upgrade(self, template, new_template):
        if new_template:
            self.process = subprocess.Popen(['./qvm-template-upgrade', template, '--clone', '--new-template', new_template], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, preexec_fn=os.setsid)
        else:
            self.process = subprocess.Popen(['./qvm-template-upgrade', template], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, preexec_fn=os.setsid)

        GLib.io_add_watch(self.process.stdout, GLib.IO_IN | GLib.IO_HUP, self.on_stdout_ready)
        GLib.io_add_watch(self.process.stderr, GLib.IO_IN | GLib.IO_HUP, self.on_stderr_ready)
        threading.Thread(target=self.monitor_process, daemon=True).start()

    def monitor_process(self):
        self.process.wait()
        GLib.idle_add(self.on_upgrade_finished)

    def on_stdout_ready(self, source, condition):
    if condition == GLib.IO_IN:
        line = source.readline()
        if line:
            GLib.idle_add(self.update_log, line.strip())
            GLib.idle_add(self.update_progress, line.strip())  
        return True  
    return False  

def on_stderr_ready(self, source, condition):
    if condition == GLib.IO_IN:
        line = source.readline()
        if line:
            GLib.idle_add(self.update_log, line.strip())
            GLib.idle_add(self.update_progress, line.strip())  
        return True  
    return False 

    def update_log(self, output):
        ansi_escape = re.compile(r'(\x1B[@-_][0-?]*[ -/]*[@-~]|[\x80-\xFF])')
        output_clean = ansi_escape.sub('', output)
        end_iter = self.log_textbuffer.get_end_iter()
        self.log_textbuffer.insert(end_iter, output_clean + "\n")
        self.progressbar.pulse()

        self.log_textview.scroll_to_iter(end_iter, 0.0, True, 0.0, 1.0)
        return False

    def update_progress(self, output):
    package_progress_regex = re.compile(r'\((\d+)/(\d+)\)')
    match = package_progress_regex.search(output)
    if match:
        current, total = map(int, match.groups())
        if total > 0:
            fraction = current / total
            self.progressbar.set_fraction(fraction)
    return False

    def on_upgrade_finished(self):
        self.start_button.set_sensitive(True)
        self.progressbar.set_fraction(1.0)

    def on_close_button_clicked(self, widget):
        if self.process and self.process.poll() is None:
            os.killpg(os.getpgid(self.process.pid), signal.SIGTERM)
            subprocess.run(['qvm-shutdown', self.selected_template])
        Gtk.main_quit()

win = QubesTemplateUpgradeGUI()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
